generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  balance       Float          @default(0.0)
  avatar        String?        // Новый атрибут для хранения аватарки
  events        Event[]        @relation("OrganizerEvents")
  Speaker       Speaker[]
  subscriptions Subscription[]
  transactions  Transaction[]
  roleId        Int?           @default(2)
  role          Role?          @relation(fields: [roleId], references: [id])
}


model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Event {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  date          DateTime        @default(now())
  isPaid        Boolean         @default(false)
  price         Float?
  image         String?         // Новый атрибут для хранения картинки мероприятия
  organizerId   Int
  venueId       Int?
  venue         Venue?          @relation(fields: [venueId], references: [id])
  organizer     User            @relation("OrganizerEvents", fields: [organizerId], references: [id])
  categories    EventCategory[]
  speakers      EventSpeaker[]
  subscriptions Subscription[]
  Transaction   Transaction[]
}

model Subscription {
  id               Int      @id @default(autoincrement())
  userId           Int
  eventId          Int
  subscriptionDate DateTime
  event            Event    @relation(fields: [eventId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  userId    Int
  eventId   Int?
  createdAt DateTime @default(now())
  event     Event?   @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Speaker {
  id        Int            @id @default(autoincrement())
  name      String
  biography String
  avatar    String?        // Новый атрибут для аватарки спикера
  events    EventSpeaker[]
  userId    Int
  user      User           @relation(fields: [userId], references: [id])
}

model Category {
  id     Int             @id @default(autoincrement())
  name   String
  events EventCategory[]
}

model Venue {
  id       Int     @id @default(autoincrement())
  name     String
  address  String
  capacity Int
  image    String? // Новый атрибут для изображения места
  events   Event[]
}


model EventSpeaker {
  id        Int     @id @default(autoincrement())
  eventId   Int
  speakerId Int
  speaker   Speaker @relation(fields: [speakerId], references: [id])
  event     Event   @relation(fields: [eventId], references: [id])
}

model EventCategory {
  id         Int      @id @default(autoincrement())
  eventId    Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  event      Event    @relation(fields: [eventId], references: [id])
}

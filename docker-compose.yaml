services:
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus/
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: always
    environment:
      TZ: "Europe/Moscow"
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    container_name: alertmanager
    ports:
      - 9093:9093
    restart: always
    networks:
      - monitoring
    depends_on:
      - prometheus

  grafana:
    image: grafana/grafana:latest
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    restart: always
    environment:
      TZ: "Europe/Moscow"
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    networks:
      - monitoring

  cadvisor:
    image: google/cadvisor:latest
    ports:
      - 8080:8080
    volumes:
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /:/rootfs:ro
    restart: always
    container_name: cadvisor
    hostname: cadvisor
    environment:
      TZ: "Europe/Moscow"
    networks:
      - monitoring

  postgres:
    image: postgres:17
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dogpad
    ports:
      - "5432:5432"
    networks:
      - monitoring
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    container_name: adminer
    ports:
      - 8082:8080
    networks:
      - monitoring
    depends_on:
      - postgres

  app:
    build: .
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/dogpad?schema=public
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./prisma:/express_bunny/prisma
    command: sh -c "npx prisma generate && node app.js"
    networks:
      - monitoring

networks:
  monitoring:

volumes:
  postgres_data:
